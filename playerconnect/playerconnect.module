<?php

/**
 * Implements hook_help().
 */
function playerconnect_help($route_name, $route_match) {
  switch ($route_name) {
    case 'help.page.playerconnect':
      return '<p>' . t('This module allows for the management of player nodes via a RESTful API. Anonymous users can create and update player nodes. The module includes a content type called "Player" with fields for current score, high score, and player info.') . '</p>' .
             '<p>' . t('Example API usage:') . '</p>' .
             '<pre><code>curl -X POST https://[YOUR-DOMAIN]/playerconnect/create-player \
  -H "Content-Type: application/json" \
  -d \'{
    "passkey": "[YOUR-PASSKEY]",
    "playerconnect_name": "jofurky",
    "playerconnect_current_score": 5,
    "playerconnect_info": "Hello world!"
  }\'</code></pre>'.
             '<br><br><p>' . t('Example Godot integration:') . '</p>' .
             '<pre><code># Function to send HTTP request with player name and score
func send_score_update(pname, current_score):
    # Construct JSON data
    var json_data = {
        "passkey": "[YOUR-PASSKEY]",
        "playerconnect_name": pname,
        "playerconnect_current_score": current_score,
        "playerconnect_info": "Hello world!"
    }
    var json_text = JSON.stringify(json_data)
    
    # Create a properly formatted POST request
    var headers = PackedStringArray(["Content-Type: application/json"])
    var body = json_text.to_utf8_buffer()
    
    # Log the request details
    print("Sending HTTP request with the following data:")
    print("URL: https://[YOUR-DOMAIN]/playerconnect/create-player")
    print("Headers: Content-Type: application/json")
    print("JSON Data: ", json_text)
    
    # Send POST request using the correct signature for Godot 4.4
    var error = http_request.request_raw(
        "https://[YOUR-DOMAIN]/playerconnect/create-player",  # URL
        headers,                                                 # Headers
        HTTPClient.METHOD_POST,                                  # HTTP Method as enum
        body                                                     # Request body as PackedByteArray
    )
    
    # Log any errors in making the request
    if error != OK:
        print("Error making request: ", error)

# Called when HTTPRequest completes
func _on_HTTPRequest_request_completed(result, response_code, headers, body):
    print("HTTP request completed with result: ", result)
    print("Response code: ", response_code)
    print("Headers: ", headers)
    print("Body: ", body.get_string_from_utf8())

    var json = JSON.new()
    var parse_error = json.parse(body.get_string_from_utf8())
    if parse_error == OK:
        print("Response: ", json.data)
    else:
        print("Error parsing response: ", json.get_error_message())
        print("Error line: ", json.get_error_line())
</code></pre>';
  }
}




/**
 * Implements hook_permission().
 */
function playerconnect_permission() {
  return [
    'add player nodes' => [
      'title' => t('Add player nodes'),
    ],
    'update player nodes' => [
      'title' => t('Update player nodes'),
    ],
  ];
}

/**
 * Implements hook_entity_type_build().
 */
function playerconnect_entity_type_build(array &$entity_types) {
  // Define the Player entity type and its fields.
}

/**
 * Implements hook_rest_resource_info().
 */
function playerconnect_rest_resource_info() {
  return [
    'player' => [
      'label' => t('Player Resource'),
      'uri' => '/api/player',
      'resource_class' => 'Drupal\playerconnect\Plugin\rest\resource\PlayerResource',
    ],
  ];
}